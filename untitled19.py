# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U8uvF_KZqBnkW7EZqz1hpRbiBN6pNUql
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset
df = pd.read_csv("/content/water_potability.csv")

# Handling missing values by filling them with the mean
df.fillna(df.mean(), inplace=True)

# Split dataset into features and target variable
X = df.drop("Potability", axis=1)
y = df["Potability"]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101, shuffle=True)

# Normalize the data (important for logistic regression)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train Logistic Regression model
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)

# Predict on test set
y_pred = log_reg.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Function to predict new water sample
def predict_water_potability(sample):

    """
    Predicts if the water is potable (1) or not potable (0).
    :param sample: List of 9 feature values in the correct order.
    :return: "Potable" or "Not Potable"
    """

    sample = np.array(sample).reshape(1, -1)  # Convert to 2D array
    sample = scaler.transform(sample)  # Scale the input data
    prediction = log_reg.predict(sample)
    return "Quality Water" if prediction[0] == 1 else "Not Quality water"

# Example prediction
sample_input = [7.0, 200, 250, 83.0, 109, 56, 54, 0.55, 100]  # Example feature values
result = predict_water_potability(sample_input)
print(f"Predicted Water Quality: {result}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

df = pd.read_csv("/content/water_potability.csv")
print(df)

df.info()

print(df.isnull())

print(df.isnull().sum())

df = df.dropna()

print(df.isnull().sum())

df.info()

selected_features=["ph"]

X=df[selected_features]
y=df["ph"]
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

model=LinearRegression()
model.fit(X_train, y_train)